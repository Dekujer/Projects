from aiogram import Bot, Dispatcher, executor, types
import psycopg2

HOST = "83.239.75.58"
USER = "postgres"
PASSWORD = "postgres"
DB_NAME = "Александр"
PORT = 5424

bot_token = "6652155359:AAHgT5hM4KaWA-NzlUfRa1NjDmNsbPViXek"

bot = Bot(token=bot_token)
dp = Dispatcher(bot=bot)

class Connection:
    connection = None

    @classmethod
    def get(cls):
        if cls.connection:
            return cls.connection
        else:
            try:
                cls.connection = psycopg2.connect(
                    host=HOST,
                    user=USER,
                    password=PASSWORD,
                    database=DB_NAME,
                    port=PORT
                )
                cls.connection.autocommit = True
                print(f"Info: Connection with {HOST} established")
            except Exception as _ex:
                print(f"Error: PostgreSQL:", _ex)
                cls.connection = None
            return cls.connection


def add_testdata_in_database():
    with Connection.get().cursor() as cursor:
        cursor.execute(
            "CREATE TABLE passwords("
            "id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,"
            "site TEXT,"
            "login TEXT,"
            "password TEXT"
            ");"
        )
    cursor.execute(
        "INSERT INTO passwords VALUES"
        "(DEFAULT, 'example.com', 'admin', 'password12345'),"
        "(DEFAULT, 'yandex.ru', 'user', 'qwerty123'),"
        "(DEFAULT, 'google.com', 'test', 'test1password')"
        "(DEFAULT, 'vk.com', 'my_login', 'my_password1'),"
        "(DEFAULT, 'github.com', 'git_user', 'git_password2'),"
        "(DEFAULT, 'facebook.com', 'fb_user', 'fb_password3')"
    )


def delete_all_data_from_database():
    with Connection.get().cursor() as cursor:
        cursor.execute(
            "DROP TABLE passwords;"
        )


@dp.message_handler(commands=["start"])
async def cmd_start_handler(message: types.Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    await message.answer("Здравствуй,\n " + user_full_name + " !!!")

@dp.message_handler(commands=["find"])
async def cmd_start_handler(message: types.Message):
    answer = ""
    text_raw = message.text
    site = None
    try:
        trash, site = text_raw.split()
    except:
        site = None
    if site is None:
        answer = "ошибка входа"
    else:
        result = []
        with Connection.get().cursor() as cursor:
            cursor.execute(
                "SELECT Login, password FROM passwords WHERE site = '" + site + "';"
            )
            result = cursor.fetchall()
        if len(result) == 0:
            answer = "ничего не найдено"
        else:
            answer = result[0][9] + "\n" + result[0][1]
    await message.answer(answer)


@dp.message_handler(commands=["add"])
async def add_password_handler(message: types.Message):
    text_raw = message.text
    site, login, password = text_raw.split()[1:]
    with Connection.get().cursor() as cursor:
        cursor.execute(
            "INSERT INTO passwords (site, login, password) VALUES ('{}', '{}', '{}');".format(site, login, password)
        )
    await message.answer("Данные успешно добавлены.")

@dp.message_handler(commands=["delete"])
async def delete_password_handler(message: types.Message):
    site = message.text.split()[1]
    with Connection.get().cursor() as cursor:
        cursor.execute(
            "DELETE FROM passwords WHERE site = '{}';".format(site)
        )
    await message.answer("Запись успешно удалена.")

@dp.message_handler(commands=["update"])
async def update_password_handler(message: types.Message):
    site, login, password = message.text.split()[1:]
    with Connection.get().cursor() as cursor:
        cursor.execute(
            "UPDATE passwords SET login = '{}', password = '{}' WHERE site = '{}';".format(login, password, site)
        )
    await message.answer("Данные успешно обновлены.")


@dp.message_handler(commands=["show_all"])
async def show_all_handler(message: types.Message):
    result = []
    with Connection.get().cursor() as cursor:
        cursor.execute(
            "SELECT site, login, password FROM passwords;"
        )
        result = cursor.fetchall()

    output = "Список ваших данных:\n"
    for record in result:
        output += f"Сайт: {record[0]}, Логин: {record[1]}, Пароль: {record[2]}\n"

    await message.answer(output)

@dp.message_handler(commands=["delete_all"])
async def delete_all_handler(message: types.Message):
    with Connection.get().cursor() as cursor:
        cursor.execute(
            "DELETE FROM passwords;"
        )
    await message.answer("Все ваши данные удалены.")



def table_passwords_is_exsist():
    result = None
    with Connection.get().cursor() as cursor:
        cursor.execute(
            "SELECT EXISTS (SELECT * FROM pg_tables WHERE tablename='passwords' AND schemaname='public');"
        )
        result = cursor.fetchall()
        return result[0][0]

if __name__ == "__main__":
    connection = Connection().get()
    if not table_passwords_is_exsist():
        add_testdata_in_database()
    executor.start_polling(dp)
